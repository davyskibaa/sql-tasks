-- Join. Part 1

-- task 1
SELECT 
	customers_new.customer_id, 
	customers_new.name, 
	MAX(AGE(TO_TIMESTAMP(shipment_date, 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP(order_date, 'YYYY-MM-DD HH24:MI:SS'))) AS waiting_time
FROM customers_new
JOIN orders_new
ON customers_new.customer_id = orders_new.customer_id
GROUP BY customers_new.customer_id, customers_new.name
ORDER BY waiting_time DESC
LIMIT 1;

-- task 2
SELECT 
	customers_new.customer_id, 
	customers_new.name, 
	COUNT(*) AS number_of_orders,
	SUM(order_ammount) AS total_sum,
	AVG(AGE(TO_TIMESTAMP(shipment_date, 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP(order_date, 'YYYY-MM-DD HH24:MI:SS'))) AS waiting_time
FROM customers_new 
JOIN orders_new 
ON customers_new.customer_id = orders_new.customer_id
GROUP BY customers_new.customer_id, customers_new.name
HAVING COUNT(*) = (
    SELECT MAX(order_count)
    FROM (
        SELECT COUNT(*) AS order_count
        FROM orders_new
        GROUP BY customer_id
    ) AS subquery
)
ORDER BY total_sum DESC;

-- task 3
SELECT 
    c.customer_id,
    c.name, 
    COUNT(CASE 
        WHEN (TO_TIMESTAMP(o.shipment_date, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(o.order_date, 'YYYY-MM-DD HH24:MI:SS')) > INTERVAL '5 days' 
        THEN 1 
        ELSE NULL 
    END) AS delayed_orders_count,  -- количество заказов с задержкой
    COUNT(CASE 
        WHEN o.order_status = 'Cancel' THEN 1 
        ELSE NULL 
    END) AS canceled_orders_count, -- количество отмененных заказов
    SUM(CASE 
        WHEN (TO_TIMESTAMP(o.shipment_date, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(o.order_date, 'YYYY-MM-DD HH24:MI:SS')) > INTERVAL '5 days' 
            OR o.order_status = 'Cancel' THEN o.order_ammount 
        ELSE 0 
    END) AS total_sum -- сумма отменных и задержанных заказов
FROM customers_new c
JOIN orders_new o 
ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name
HAVING 
	COUNT(CASE 
        WHEN (TO_TIMESTAMP(o.shipment_date, 'YYYY-MM-DD HH24:MI:SS') - TO_TIMESTAMP(o.order_date, 'YYYY-MM-DD HH24:MI:SS')) > INTERVAL '5 days' 
        THEN 1 
        ELSE NULL 
    END) > 0
OR COUNT(CASE 
         WHEN o.order_status = 'Cancel' THEN 1 
         ELSE NULL 
    END) > 0 
ORDER BY total_sum DESC; 

-- Join. Part 2

-- task 1
SELECT 
	products.product_category,
	SUM(orders.order_ammount) AS total_sum
FROM products 
JOIN orders
ON products .product_id = orders.product_id 
GROUP BY products.product_category;

-- task 2
SELECT 
	products .product_category,
	SUM(orders.order_ammount) AS total_sum
FROM products
JOIN orders
ON products.product_id = orders.product_id 
GROUP BY products.product_category
HAVING SUM(orders.order_ammount) = (
    SELECT MAX(order_sum)
    FROM (
        SELECT SUM(orders.order_ammount) AS order_sum
        FROM products
		JOIN orders
		ON products.product_id = orders.product_id 
		GROUP BY products.product_category
    ) AS subquery
);

-- task 3
SELECT 
    p1.product_category,
    p1.product_name,
    SUM(o1.order_ammount) AS total_sales
FROM orders o1
JOIN products p1 ON o1.product_id = p1.product_id
GROUP BY p1.product_category, p1.product_name
HAVING SUM(o1.order_ammount) = (
        SELECT MAX(total_sales)
        FROM (
            SELECT SUM(o2.order_ammount) AS total_sales
            FROM orders o2
            JOIN products p2 ON o2.product_id = p2.product_id
            WHERE p2.product_category = p1.product_category
            GROUP BY p2.product_name
        ) AS subquery
    )
ORDER BY p1.product_category;
