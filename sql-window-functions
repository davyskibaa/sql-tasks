-- WF. Part 1
SELECT 
    first_name, 
    last_name, 
    salary, 
    industry,
    (SELECT first_name || ' ' || last_name
     FROM salary s2
     WHERE s2.salary = (SELECT MAX(salary) 
                        FROM salary 
                        WHERE industry = s1.industry) 
     AND s2.industry = s1.industry
     LIMIT 1) AS name_highest_sal
FROM salary s1
ORDER BY industry;

SELECT 
    first_name, 
    last_name, 
    salary, 
    industry,
    (SELECT first_name || ' ' || last_name
     FROM salary s2
     WHERE s2.salary = (SELECT MIN(salary) 
                        FROM salary 
                        WHERE industry = s1.industry) 
     AND s2.industry = s1.industry
     LIMIT 1) AS name_lowest_sal
FROM salary s1
ORDER BY industry;

SELECT 
    first_name, 
    last_name, 
    salary, 
    industry,
    FIRST_VALUE(first_name || ' ' || last_name) OVER (PARTITION BY industry ORDER BY salary DESC) AS name_highest_sal
FROM salary
ORDER BY industry;

SELECT 
    first_name, 
    last_name, 
    salary, 
    industry,
    FIRST_VALUE(first_name || ' ' || last_name) OVER (PARTITION BY industry ORDER BY salary ASC) AS name_lowest_sal
FROM salary
ORDER BY industry;


-- WF. Part 2
SELECT DISTINCT
    sh."SHOPNUMBER",
    sh."CITY",
    sh."ADDRESS",
    SUM(s."QTY") OVER (PARTITION BY sh."SHOPNUMBER") AS "SUM_QTY",
    SUM(s."QTY" * g."PRICE") OVER (PARTITION BY sh."SHOPNUMBER") AS "SUM_QTY_PRICE"
FROM "sales" s
JOIN "goods" g ON s."ID_GOOD" = g."ID_GOOD"
JOIN "shops" sh ON s."SHOPNUMBER" = sh."SHOPNUMBER"
WHERE s."DATE" = '02.01.2016'
ORDER BY sh."SHOPNUMBER";

SELECT 
    s."DATE" AS "DATE_",
    sh."CITY",
    SUM(s."QTY" * g."PRICE") / 
        SUM(SUM(s."QTY" * g."PRICE")) OVER (PARTITION BY s."DATE") AS "SUM_SALES_REL"
FROM "sales" s
JOIN "goods" g ON s."ID_GOOD" = g."ID_GOOD"
JOIN "shops" sh ON s."SHOPNUMBER" = sh."SHOPNUMBER"
WHERE g."CATEGORY" = 'ЧИСТОТА'
GROUP BY s."DATE", sh."CITY"
ORDER BY s."DATE", sh."CITY";

WITH ranked_sales AS (
    SELECT 
        s."DATE" AS "DATE_",
        s."SHOPNUMBER",
        s."ID_GOOD",
        SUM(s."QTY") AS "TOTAL_QUANTITY",
        RANK() OVER (PARTITION BY s."DATE", s."SHOPNUMBER" ORDER BY SUM(s."QTY") DESC) AS rank
    FROM "sales" s
    JOIN "goods" g ON s."ID_GOOD" = g."ID_GOOD"
    GROUP BY s."DATE", s."SHOPNUMBER", s."ID_GOOD"
)
SELECT 
    "DATE_",
    "SHOPNUMBER",
    "ID_GOOD"
FROM ranked_sales
WHERE rank <= 3
ORDER BY "DATE_", "SHOPNUMBER", rank;

WITH sales_by_date AS (
    SELECT 
        s."DATE" AS "DATE_",
        s."SHOPNUMBER",
        g."CATEGORY",
        SUM(s."QTY" * g."PRICE") AS "SALES_RUB"
    FROM "sales" s
    JOIN "goods" g ON s."ID_GOOD" = g."ID_GOOD"
    JOIN "shops" sh ON s."SHOPNUMBER" = sh."SHOPNUMBER"
    WHERE sh."CITY" = 'СПб'
    GROUP BY s."DATE", s."SHOPNUMBER", g."CATEGORY"
)
SELECT 
    sb."DATE_",
    sb."SHOPNUMBER",
    sb."CATEGORY",
    COALESCE(LAG(sb."SALES_RUB") OVER (PARTITION BY sb."SHOPNUMBER", sb."CATEGORY" ORDER BY sb."DATE_"), 0) AS "PREV_SALES"
FROM sales_by_date sb
ORDER BY sb."SHOPNUMBER", sb."CATEGORY", sb."DATE_";


-- WF. Part 3
CREATE TABLE query (
    searchid SERIAL PRIMARY KEY,
    year INT,
    month INT,
    day INT,
    userid INT,
    ts INT,
    devicetype VARCHAR(50),
    deviceid INT,
    query TEXT
);

INSERT INTO query (year, month, day, userid, ts, devicetype, deviceid, query)
VALUES
(2024, 11, 1, 1001, 1698900000, 'android', 1, 'купить'),
(2024, 11, 1, 1001, 1698900300, 'android', 1, 'куртку'),
(2024, 11, 1, 1002, 1698900900, 'android', 1, 'купить'),
(2024, 11, 1, 1002, 1698901200, 'android', 1, 'телефон'),
(2024, 11, 1, 1003, 1698901500, 'android', 2, 'купит');

WITH query_with_next AS (
    SELECT 
        searchid,
        year,
        month,
        day,
        userid,
        ts,
        devicetype,
        deviceid,
        query,
        LEAD(ts) OVER (PARTITION BY userid, deviceid ORDER BY ts) AS next_ts, 
        LEAD(query) OVER (PARTITION BY userid, deviceid ORDER BY ts) AS next_query
    FROM query
    WHERE devicetype = 'android'
    AND year = 2024 AND month = 11 AND day = 1
)
SELECT 
    year,
    month,
    day,
    userid,
    ts,
    devicetype,
    deviceid,
    query,
    next_query,
    CASE
        WHEN next_ts IS NULL THEN 1  -- если это последний запрос пользователя
        WHEN next_ts - ts > 180 THEN 1  -- если разница во времени больше 3 минут
        WHEN next_ts - ts > 60 AND LENGTH(next_query) < LENGTH(query) THEN 2  -- если разница больше 1 минуты и следующий запрос короче
        ELSE 0  -- в других случаях
    END AS is_final
FROM query_with_next
WHERE 
    (next_ts IS NULL OR next_ts - ts > 180 OR (next_ts - ts > 60 AND LENGTH(next_query) < LENGTH(query))) 
ORDER BY ts;
